###################### Start of libnfc-nci.conf #######################

###############################################################################
# Application options
NFC_DEBUG_ENABLED=1

###############################################################################
# File used for NFA storage
NFA_STORAGE="/data/nfc"

###############################################################################
# Configure the default Destination Gate used by HCI (the default is 4, which
# is the ETSI loopback gate.
#NFA_HCI_DEFAULT_DEST_GATE=0x04

###############################################################################
# Override the stack default for NFA_EE_MAX_EE_SUPPORTED set in nfc_target.h.
# The value is set to 3 by default as it assumes we will discover 0xF2,
# 0xF3, and 0xF4. If a platform will exclude and SE, this value can be reduced
# so that the stack will not wait any longer than necessary.
NFA_MAX_EE_SUPPORTED=2

###############################################################################
# Configure the single default SE to use.  The default is to use the first
# SE that is detected by the stack.  This value might be used when the phone
# supports multiple SE (e.g. 0xF3 and 0xF4) but you want to force it to use
# one of them (e.g. 0xF4).
#ACTIVE_SE=0xF3
ACTIVE_SE=0x02

###############################################################################
# Configure AID matching alogolizum
# Every routing table entry is matched exact (BCM20793)
# AID_MATCHING_EXACT_ONLY = 0x00;
# Every routing table entry can be matched either exact or prefix
# AID_MATCHING_EXACT_OR_PREFIX = 0x01;
# Every routing table entry is matched as a prefix
# AID_MATCHING_PREFIX_ONLY = 0x02;
AID_MATCHING_MODE=0

###############################################################################
# Configure the NFC Extras to open and use a static pipe.  If the value is
# not set or set to 0, then the default is use a dynamic pipe based on a
# destination gate (see NFA_HCI_DEFAULT_DEST_GATE).  Note there is a value
# for each UICC (where F3="UICC0" and F4="UICC1")
#NFA_HCI_STATIC_PIPE_ID_F3=0x70
#NFA_HCI_STATIC_PIPE_ID_F4=0x71
NFA_HCI_STATIC_PIPE_ID_01=0x70

###############################################################################
# Force UICC to only listen to the following technology(s).
# The bits are defined as tNFA_TECHNOLOGY_MASK in nfa_api.h.
# Default is NFA_TECHNOLOGY_MASK_A | NFA_TECHNOLOGY_MASK_B.
# if set 0, auto select
UICC_LISTEN_TECH_MASK=0x03

###############################################################################
# AID for Empty Select command
# If specified, this AID will be substituted when an Empty SELECT command is
# detected.  The first byte is the length of the AID.  Maximum length is 16.
#AID_FOR_EMPTY_SELECT={08:A0:00:00:01:51:00:00:00}

###############################################################################
# Force tag polling for the following technology(s).
# The bits are defined as tNFA_TECHNOLOGY_MASK in nfa_api.h.
# Default is NFA_TECHNOLOGY_MASK_A | NFA_TECHNOLOGY_MASK_B |
#            NFA_TECHNOLOGY_MASK_F | NFA_TECHNOLOGY_MASK_ISO15693 |
#            NFA_TECHNOLOGY_MASK_B_PRIME | NFA_TECHNOLOGY_MASK_A_ACTIVE |
#            NFA_TECHNOLOGY_MASK_F_ACTIVE.
#
# Notable bits:
# NFA_TECHNOLOGY_MASK_A 0x01
# NFA_TECHNOLOGY_MASK_B 0x02
# NFA_TECHNOLOGY_MASK_F 0x04
# NFA_TECHNOLOGY_MASK_ISO15693 0x08
# NFA_TECHNOLOGY_MASK_B_PRIME 0x10
# NFA_TECHNOLOGY_MASK_KOVIO 0x20
# NFA_TECHNOLOGY_MASK_A_ACTIVE 0x40
# NFA_TECHNOLOGY_MASK_F_ACTIVE 0x80
POLLING_TECH_MASK=0xEF

###############################################################################
# Force P2P to only listen for the following technology(s).
# The bits are defined as tNFA_TECHNOLOGY_MASK in nfa_api.h.
# Default is NFA_TECHNOLOGY_MASK_A | NFA_TECHNOLOGY_MASK_F |
#            NFA_TECHNOLOGY_MASK_A_ACTIVE | NFA_TECHNOLOGY_MASK_F_ACTIVE
P2P_LISTEN_TECH_MASK=0xC5

###############################################################################
# When screen is turned off, specify the desired power state of the controller.
# 0: power-off-sleep state; DEFAULT
# 1: full-power state
# 2: screen-off card-emulation (CE4/CE3/CE1 modes are used)
SCREEN_OFF_POWER_STATE=2

###############################################################################
# Default poll duration (in ms)
#  The defualt is 500ms if not set (see nfc_target.h)
NFA_DM_DISC_DURATION_POLL=300

###############################################################################
# preserve stack NV store
PRESERVE_STORAGE=1

###############################################################################
# Configuration for the RF discovery frequency for each technology. The values mean
# frequency for NFC Technology A
# Technology B
# Technology F
# Proprietary Technology/15693
# Proprietary Technology/B-Prime
# Proprietary Technology/Kovio
# Technology A active mode
# Technology F active mode
#POLL_FREQUENCY={01:01:01:01:01:01:01:01}

###############################################################################
# CXD22xx addtional options

###############################################################################
# CXD224X_WORKAROUND : CXD224x device specific workaround over HAL layer(libnfc-nci and jni)
#                    : mainly used for F/W bug workaround, spec differnce from brcm device
# 0x1: Workaround    replace bigend packet to little(f/w bug), cxd224x only(nfa/dm,nfa/ce)
# 0x2: Workaround    drop status byte in the Data Packet from RF to DH(ISO15693 use)(nfc/nfc)
# 0x4: Workaround    use custom Listen Mode Routing. add ListenMask(jni)
# 0x8: Workaround    report CORE_GENERIC_ERROR to upper layer(nfa/dm)
# 0x10:Workaround    ignore extra EE_DISCOVERY_REQ_NTF(nfa/hci)
# 0x20:
# 0x40:Workaround    enable the restoring status if NFCEE i/f is HCI Access(nfa/ee)
# 0x80:Workaround    enable max read block limitter(nfc/tags/rw_i93)
# 0x100:Workaround   switch HAL_LP_IDLE_TIMEOUT after NFA_Enable() complate.(nfa/sys)
# 0x200:Workaround   request saved NTF(EE_DISC_REQ_NTF) packets which recved during init(nfa/hci)
# 0x400:Workaround   Send Deselect command during PresenceCheck when connected to NfcA/NfcB(nfa/rw)
# 0x800:Workaround   Disable(ModeSet) NFCEE(HCI interface) when recv multiple EE_INTF_ACTIVE_FAIL(nfa/hci)
# 0x1000:Workaround  DO NOT SEND EE_DISCOVER_REQ_EVT when EE mode is changed from Inactive to Active.(nfa/ee)
# 0x2000:Workaround  T3T and Frame RF Interface in RF_INTF_ACTIVATE_NTF, copy local nfcid2.(nfa/ce)
# 0x4000:Workaround  drop all zero packet, it may be casued by spurious interrupt(nfc/nfc)
# 0x8000:Workaround  Store HCI into to device NV(jni)
CXD224X_WORKAROUND=0x0575E

###############################################################################
# CXD225X_WORKAROUND : CXD225x device specific workaround over HAL layer(libnfc-nci and jni)
#                    : mainly used for F/W bug workaround, spec differnce from brcm device
# 0x1: Workaround    Send REQUEST_SENSE cmd when recv GEN_ERROR(0xe9)(jni)
CXD225X_WORKAROUND=0x00001

###############################################################################
# LIBNCI_BUGFIX: libnfc-nci bug fix switch over HAL layer
#
# 0x2: BugFix: T2T fix NULL TLV can not cross 16byte boundary( offset calc bug )
LIBNCI_BUGFIX=0x2

###############################################################################
# Configure the discovery sequence for NFCEE HCI network  (the default is 0)
# 0x0: NFCEE_MODE_SET=>CONN_CREATE (original)
# 0x1: DELAYED MODE_SET mode1 ( nfa_hci_dh_startup_complete() )
# 0x2: DELAYED MODE_SET mode1 with checking UIM gate( nfa_hci_dh_startup_complete() )
NFA_HCI_DISCOVERY_SEQ=0x2

###############################################################################
# Configure the UIM management gate polling interval time(the default is 0)
# Insert a delay in microseconds after UIM management gate read.
# This parameter is only effective under NFA_HCI_DISCOVERY_SEQ=0x2 mode
NFA_HCI_UIM_POLLING_INTERVAL=100

###############################################################################
# Configure the pre-wait time before polling UIM management gate(the default is 0)
# Insert a delay in microseconds before 1st UIM management gate read.
# This parameter is only effective under NFA_HCI_DISCOVERY_SEQ=0x2 mode
NFA_HCI_UIM_POLLING_PREWAIT=700

###############################################################################
# Configure DTA mode ( the default is 0 )
# 0x0: disable
# 0x1: enable, disable sending t3t_polling command after recv INTF_ACTIVATED etc
DTA_MODE=0x0

###############################################################################
# Configure NFA_RequestExclusiveRfControl() ( the default is 0 )
# 0x0: original
# 0x1: enable additional paramter(tNFA_LISTEN_CFG.ignore_rt_check_enable)
#      this paramter disabled comparing 'listen_RT == DH' in nfa_dm_set_rf_listen_mode_raw_config()
#      for using this as UICC listen only enabler function.
NFA_EXCLUSIVERFCONTROL_CONFIG=0x1

###############################################################################
# Configure NFA_RF_DISCOVERY
# The RF Communication State Machine defined by NCI Spec is forbidden to receive
# RF_DISCOVER_CMD in RFST_DISVOVERY state.
# This configuration is used to accept RF_DISCOVER_CMD even in RFST_DISVOVERY
# state and then enable to transit from/to Poll&Listen and ExclRfCtrl mode
# directly(skip RF_IDLE state)
# The default(comment out) is reserved orignal error check
# "nfcManager_enableDiscovery: already polling"
#
# 0x0: keep original state machine( via RFST_IDLE ), but skip error checking
# 0x1: skip RFST_IDLE state only when Poll&Listen=>ExclRfCtrl
# 0x3: accept RF_discovery request even in NFA_DM_RFST_DISCOVERY state
#      both Poll&Listen<=>ExclRfCtrl
# 0x4: skip NFC_Deactivate in case of the discovery states mismatch between NFCC and DH
# 0x7: all enable
NFA_RF_DISCOVERY_CONFIG=0x5

###############################################################################
# Configure Listen A Parameter for LA_BIT_FRAME_SDD(Byte 1 of SENS_RES) when TypeA is routing to DH
NFA_DM_LA_BIT_FRAME_SDD=0x01

###############################################################################
# Configure NFA_HCI_EVT_TRANSACTION action
# 0x1: NFA_HCI_EVT_TRANSACTION_ACTION_AOSP -- AOSP action(default)
# 0x2: NFA_HCI_EVT_TRANSACTION_ACTION_SONY -- com.sony.nfc.action.TRANSACTION_DETECTED
# 0x4: NFA_HCI_EVT_TRANSACTION_ACTION_GSMA -- GSMA NFC Handset APIs Requirement Specification
HCI_EVT_TRANSACTION_ACTION=0x4

###############################################################################
# Configure Felica
FELICA_CONFIG=0xFFFFFFFF
# EE handle
NFCEE_ID_ESE=0x402
NFCEE_ID_UICC=0x401

###############################################################################
# Configure T3T CE LISTEN registration limitter
# This value is used when NFA_CeRegisterFelicaSystemCodeOnDH is called.
# Should be set the value of LF_T3T_MAX(configuration parameter) or less
# LF_T3T_MAX is 2 on CXD224X
CE_LF_T3T_MAX_LIMIT=2

###############################################################################
# Configure panic action
# if a) NFCC stopped responding(timeout) or b) Reset itself(recv CORE_RESET_NTF),
# the following action can be selected.
#
# 0: AOSP (default), same as orignal AOSP function
# 1: kill() process
# 2: abort() process
# 3: a) abort(), b) Send event(NFA_DM_CORE_RESET_NTF_REVT)
# 4: a) device reset then kill() process when recv CORE_RESET_NTF, b) kill()
# 5: a) device reset then Send event, b) Send event(NFA_DM_CORE_RESET_NTF_REVT)
# 6: a) Send event(NFA_DM_CORE_GEN_ERROR_REVT(HW_TIMEOUT)),
#    b) Send event(NFA_DM_CORE_RESET_NTF_REVT) for debug use only
SELECT_PANIC_ACTION=1

###############################################################################
# AID for initial entry
# If specified, these AIDs will be added when RoutingManager::initialize
# The first byte of each TLV entry is the length of the AID + 2B(nfcee_id + power_state).
# Maximum length is 18. The 2nd byte is nfcee id, the 3rd byte is power state, the remain bytes are the AID
#AID_FOR_INIT_ENTRY={12:01:03:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00}

###############################################################################
# Configure the default NfcA/B techology route. Can be
# either a secure element (e.g. 0xF4) or the host (0x00)
DEFAULT_TECH_ROUTE=0x01

###############################################################################
# Masking value of technologies_switch_off for NFA_EeSetDefaultTechRouting()
# this value is used as masking value of technologies_switch_off, and it is not for DH ee_handle
# If the value is not set, masking value is 0xff
MASKING_TECH_EE_SWITCHOFF=0x0

###############################################################################
# Masking value of protocols_switch_off for NFA_EeSetDefaultProtoRouting()
# this value is used as masking value of protocols_switch_off, and it is not for DH ee_handle
# If the value is not set, masking value is 0xff
MASKING_PROTO_EE_SWITCHOFF=0xff
